#!/bin/bash

BASE_BIN_DIR=`dirname $0`
. $BASE_BIN_DIR/env

PROG_NAME=$0
ACTION=$1

usage() {
	echo "Usage: $PROG_NAME {start|stop|restart}"
	exit 1;
}

if [ $# -lt 1 ]; then
	usage
fi

#Runtime jetty directory
JETTY_SERVER_HOME=$WEB_APP_HOME/jetty-server

TMPDIR="$JETTY_SERVER_HOME/tmp"
JETTY_CONF="$JETTY_SERVER_HOME/conf/jetty.conf"
JETTY_WEBAPPS="$JETTY_SERVER_HOME/webapps"
START_INI="$JETTY_SERVER_HOME/conf/jetty-start.ini"
JETTY_ARGS="--ini=$START_INI"
JETTY_PID="$OUTPUT_HOME/logs/jetty.pid"
JETTY_LOGS="$OUTPUT_HOME/logs"
JAVA="$JAVA_HOME/bin/java" 
JAVA_OPTIONS="$JAVA_OPTS"

#Export the env variables that jetty need
export TMPDIR JETTY_CONF JETTY_WEBAPPS JETTY_ARGS START_INI JETTY_PID JETTY_LOGS JAVA_OPTIONS JAVA

# Define you own war name
WAR_NAME="doris-admin.war"

#Define jetty log file
STDOUT_LOG=$OUTPUT_HOME/logs/jetty_stdout.log

# Check if a jetty process already running, or if the war file is ready
checkjavaps(){
	STR=`ps -C java -f --width 1000 | grep "$JETTY_SERVER_HOME"`
	if [ ! -z "$STR" ]; then
		echo "warn: Java process is already run, please check."
		exit;
	fi

	STR=`netstat -an | grep ' $APP_PORT'| grep LISTEN`
	if [ ! -z "$STR" ]; then
		echo "warn: JBoss port is already used, please check."
		exit;
	fi

	if [ ! -d "$WEB_APP_HOME/target/$WAR_NAME" ]; then
		echo "warn: $WAR_NAME is not exist, please check."
		exit;
    fi
	
}

prepare() {
	echo -n "Start Preparing Jetty server...... "
	# delete jetty work home dir, then make the jetty work
	if [ -d "$JETTY_SERVER_HOME" ] ; then
		rm -rf  "$JETTY_SERVER_HOME"
	fi

	if [ ! -d "$JETTY_SERVER_HOME" ] ; then
		mkdir -p "$JETTY_SERVER_HOME"
	fi
	
	# cp file to jetty server home.
	cp -r "$WEB_APP_HOME/jetty-conf/conf/" $JETTY_SERVER_HOME/
	cp -r "$WEB_APP_HOME/jetty-conf/ext/"  $JETTY_SERVER_HOME/
	# create dir
	mkdir -p "$OUTPUT_HOME/logs"
  	mkdir -p "$JETTY_WEBAPPS"
	mkdir -p "$JETTY_LOGS"
	mkdir -p "$TMPDIR"
  	
	if [ ! -d "$OUTPUT_HOME/logs" ]; then
		mkdir -p $OUTPUT_HOME/logs
	fi

	if [ -f "$STDOUT_LOG.1" ]; then
		mv -f $STDOUT_LOG.1 $STDOUT_LOG.2
	fi

	if [ -f "$STDOUT_LOG" ]; then
		mv -f $STDOUT_LOG $STDOUT_LOG.1
	fi
    
	if [ ! -f "$STDOUT_LOG" ] ; then 
		touch "$STDOUT_LOG"
	fi

	if [ -f "$OUTPUT_HOME/logs/error_log" ]; then
		mv -f $OUTPUT_HOME/logs/error_log $OUTPUT_HOME/logs/error_log.1
	fi

	if [ -f "$BASE_HOME/logs/mod_jk.log" ]; then
		mv -f $OUTPUT_HOME/logs/mod_jk.log $OUTPUT_HOME/logs/mod_jk.log.1
	fi
    
	rm -rf  "$JETTY_WEBAPPS/root" 
	
	cp -r "$WEB_APP_HOME/target/$WAR_NAME"  "$JETTY_WEBAPPS/root"
	
	echo "Prepare ok"
}




start()
{
	checkjavaps

	prepare
	$JETTY_HOME/bin/jetty.sh start >$STDOUT_LOG 2>&1 &

	starthttpd
}

stop()
{
    $WEB_APP_HOME/bin/apachectl stop

    TIMESTAMP=`date +%Y_%m_%d_%H:%M`
    KILL_LOG=$OUTPUT_HOME/logs/jetty_kill_log

    echo "`hostname` was stopted at $TIMESTAMP" >>$KILL_LOG

    ps axfww | grep -v jettyctl | grep "$JETTY_SERVER_HOME" | grep -v grep | awk '{print $1}' | xargs kill -9
    
    num=`ipcs -s | grep 0x | awk '{print $2}'`
    ipcrm sem $num 2 >/dev/null
    
    num=`ipcs -m | grep 0x | awk '{print $2}'`
    ipcrm shm $num 2 >/dev/null
    
	num=`ipcs -q | grep 0x | awk '{print $2}'`
    ipcrm msg $num 2 >/dev/null

    rm -rf $JETTY_SERVER_HOME
}

starthttpd()
{
echo $CHECK_STARTUP_URL
    STARTTIME=`date +"%s"`
    COUNT=0
    sleep 5
    while true
    do
        COUNT=`curl --connect-timeout 1 -s $CHECK_STARTUP_URL | grep -c "$STARTUP_SUCCESS_MSG"`
        ENDTIME=`date +"%s"`
        COSTTIME=$(($ENDTIME - $STARTTIME))
        if [ $COUNT -lt 1 ]; then
            sleep 1
            echo -n -e "\rWait Jetty Start: $COSTTIME seconds"
        else
            echo ""
            $WEB_APP_HOME/bin/apachectl start
            echo "HTTP Start in $COSTTIME seconds."
            return
        fi
    done
}

case "$ACTION" in
    start)
        start
    ;;
    stop)
        stop
    ;;
    restart)
        stop
        sleep 5
        start
    ;;
    *)
        usage
    ;;
esac





